2.从数据库找到entity 



3.设计数据模型
定义您的功能所需的数据模型。使用 Zod 创建验证模式：

// 在新的 schema.ts 文件中  
import { z } from "zod"  
  
export const yourFeatureSchema = z.object({  
  title: z.string().min(1, "标题是必填项"),  
  status: z.string().min(1, "请选择状态"),  
  // 添加其他必要的字段  
})  
  
export type YourFeature = z.infer<typeof yourFeatureSchema>
参考现有的模式定义： tasks-mutate-drawer.tsx:34-39

4. 创建上下文（Context）
如果您的功能需要在多个组件之间共享状态，创建一个 Context：

// 在 your-feature-context.tsx 文件中  
import React, { useState } from 'react'  
import useDialogState from '@/hooks/use-dialog-state'  
import { YourFeature } from '../data/schema'  
  
type YourFeatureDialogType = 'create' | 'update' | 'delete'  
  
interface YourFeatureContextType {  
  open: YourFeatureDialogType | null  
  setOpen: (str: YourFeatureDialogType | null) => void  
  currentRow: YourFeature | null  
  setCurrentRow: React.Dispatch<React.SetStateAction<YourFeature | null>>  
}  
  
const YourFeatureContext = React.createContext<YourFeatureContextType | null>(null)  
  
export default function YourFeatureProvider({ children }: { children: React.ReactNode }) {  
  const [open, setOpen] = useDialogState<YourFeatureDialogType>(null)  
  const [currentRow, setCurrentRow] = useState<YourFeature | null>(null)  
  return (  
    <YourFeatureContext.Provider value={{ open, setOpen, currentRow, setCurrentRow }}>  
      {children}  
    </YourFeatureContext.Provider>  
  )  
}  
  
export const useYourFeature = () => {  
  const context = React.useContext(YourFeatureContext)  
  if (!context) {  
    throw new Error('useYourFeature must be used within YourFeatureProvider')  
  }  
  return context  
}
参考现有的上下文实现： tasks-context.tsx:1-39

5. 创建表单对话框组件
根据需求创建适当的对话框组件（标准对话框、抽屉对话框或确认对话框）：

标准对话框示例
// 在 your-feature-dialog.tsx 文件中  
import { useForm } from "react-hook-form"  
import { zodResolver } from "@hookform/resolvers/zod"  
import { z } from "zod"  
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog"  
import { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from "@/components/ui/form"  
import { Button } from "@/components/ui/button"  
import { Input } from "@/components/ui/input"  
import { yourFeatureSchema } from "../data/schema"  
  
interface Props {  
  open: boolean  
  onOpenChange: (open: boolean) => void  
  currentRow?: z.infer<typeof yourFeatureSchema>  
}  
  
export function YourFeatureDialog({ open, onOpenChange, currentRow }: Props) {  
  const isUpdate = !!currentRow  
    
  const form = useForm<z.infer<typeof yourFeatureSchema>>({  
    resolver: zodResolver(yourFeatureSchema),  
    defaultValues: currentRow ?? {  
      title: "",  
      status: "",  
      // 其他默认值  
    },  
  })  
    
  const onSubmit = (data: z.infer<typeof yourFeatureSchema>) => {  
    // 处理表单数据  
    onOpenChange(false)  
    form.reset()  
    showSubmittedData(data)  
  }  
    
  return (  
    <Dialog  
      open={open}  
      onOpenChange={(val) => {  
        onOpenChange(val)  
        form.reset()  
      }}  
    >  
      <DialogContent>  
        <DialogHeader>  
          <DialogTitle>{isUpdate ? "更新" : "创建"}项目</DialogTitle>  
        </DialogHeader>  
        <Form {...form}>  
          <form id="your-feature-form" onSubmit={form.handleSubmit(onSubmit)}>  
            <FormField  
              control={form.control}  
              name="title"  
              render={({ field }) => (  
                <FormItem>  
                  <FormLabel>标题</FormLabel>  
                  <FormControl>  
                    <Input {...field} placeholder="输入标题" />  
                  </FormControl>  
                  <FormMessage />  
                </FormItem>  
              )}  
            />  
            {/* 添加更多表单字段 */}  
          </form>  
        </Form>  
        <DialogFooter>  
          <Button type="submit" form="your-feature-form">  
            {isUpdate ? "更新" : "创建"}  
          </Button>  
        </DialogFooter>  
      </DialogContent>  
    </Dialog>  
  )  
}
参考现有的对话框实现： tasks-import-dialog.tsx:37-107

抽屉对话框示例
对于更复杂的表单，可以使用抽屉对话框：

// 在 your-feature-drawer.tsx 文件中  
import { Sheet, SheetContent, SheetHeader, SheetTitle } from "@/components/ui/sheet"  
// 其他导入...  
  
export function YourFeatureDrawer({ open, onOpenChange, currentRow }: Props) {  
  // 表单设置和提交处理...  
    
  return (  
    <Sheet  
      open={open}  
      onOpenChange={(v) => {  
        onOpenChange(v)  
        form.reset()  
      }}  
    >  
      <SheetContent className="flex flex-col">  
        <SheetHeader className="text-left">  
          <SheetTitle>{isUpdate ? "更新" : "创建"}项目</SheetTitle>  
        </SheetHeader>  
        {/* 表单内容... */}  
      </SheetContent>  
    </Sheet>  
  )  
}
参考现有的抽屉对话框实现： tasks-mutate-drawer.tsx:42-70

6. 创建数据表格组件
如果您的功能需要数据表格，创建相应的表格组件：

// 在 your-feature-table.tsx 文件中  
import { useState } from "react"  
import { useReactTable, getCoreRowModel, getPaginationRowModel } from "@tanstack/react-table"  
import { Table, TableHeader, TableBody, TableRow, TableCell } from "@/components/ui/table"  
import { yourFeatureColumns } from "./your-feature-columns"  
import { useYourFeature } from "../context/your-feature-context"  
  
export function YourFeatureTable() {  
  // 表格状态和配置...  
    
  return (  
    <div>  
      {/* 表格工具栏 */}  
      <div className="rounded-md border">  
        <Table>  
          <TableHeader>  
            {/* 表头 */}  
          </TableHeader>  
          <TableBody>  
            {/* 表格内容 */}  
          </TableBody>  
        </Table>  
      </div>  
      {/* 分页控件 */}  
    </div>  
  )  
}
参考现有的表格实现： users-table.tsx:1-34

7. 创建路由
在路由树中添加您的功能页面：

// 在相应的路由文件中  
import { createFileRoute } from "@tanstack/react-router"  
import YourFeaturePage from "@/features/your-feature/page"  
  
export const yourFeatureIndexRoute = createFileRoute("/_authenticated/your-feature/")({  
  component: YourFeaturePage,  
})
然后更新路由树： routeTree.gen.ts:379-397

8. 添加导航项
在侧边栏导航中添加您的功能入口：

// 在导航配置文件中  
{  
  title: "您的功能",  
  url: "/your-feature",  
  icon: YourFeatureIcon,  
}
参考现有的导航实现： nav-group.tsx:125-169

9. 测试功能
在开发过程中进行测试，确保功能正常工作：

pnpm lint && pnpm format && pnpm build
CONTRIBUTING.md:61-65

10. 提交代码
完成功能开发后，提交您的代码：

git add .  
git commit -m "feat: add your feature"  
git push origin feature/your-feature-name
11. 创建 Pull Request
最后，创建一个 Pull Request 以将您的功能合并到主仓库。确保遵循项目的 PR 指南： CONTRIBUTING.md:69-80

注意事项
遵循项目的代码风格和结构
使用 TypeScript 确保类型安全
使用 Zod 进行表单验证
使用 React Hook Form 管理表单状态
使用项目中现有的 UI 组件
在添加新功能前先讨论或创建 issue
Notes
本回答基于 shadcn-admin 项目的文档和代码，特别是表单和对话框系统的实现模式。步骤涵盖了从环境设置到代码提交的完整开发流程，包括数据模型设计、上下文创建、组件实现和路由配置等关键环节。这些步骤遵循项目现有的架构和模式，确保新功能与现有系统保持一致。
目录结构总结
src/features/: 包含应用程序的主要功能模块
tasks/: 任务管理模块
index.tsx: 模块主页面
components/: 模块相关组件
context/: 模块状态管理
data/: 模块数据定义
users/: 用户管理模块
结构类似于任务模块
src/components/: 包含可复用的通用组件
layout/: 布局相关组件
ui/: UI 基础组件
src/: 根目录下的其他文件
routeTree.gen.ts: 路由配置
main.tsx: 应用程序入口